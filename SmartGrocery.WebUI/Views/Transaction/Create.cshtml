@using SmartGrocery.WebUI.Models.Transactions

@model TransactionDetailsViewModel

@using (Html.BeginForm("Create", "Transaction", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <div class="section-container">
        @Html.HiddenFor(x => x.CreatedBy)
        @Html.HiddenFor(x => x.LastUpdatedBy)
        <div class="row">
            <div class="col-md-4 form-group required">
                @Html.LabelFor(x => x.TransactionNumber, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.TransactionNumber, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.TransactionNumber)
            </div>
            <div class="col-md-offset-1 col-md-4 form-group">
                @Html.LabelFor(x => x.CreatedAt, new { @class = "form-label" })
                <p>@Model.CreatedAt</p>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4 form-group">
                @Html.LabelFor(x => x.CustomerId, new { @class = "form-label" })
                @Html.TextBoxFor(x => x.CustomerId, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.CustomerId)
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(x => x.Amount, new { @class = "form-label" })
                    <div class="input-group">
                        @Html.TextBoxFor(x => x.Amount, new { @class = "form-control" })
                        <span class="input-group-addon clickable" id="calculate-total-price">
                            <i class="glyphicon glyphicon-usd"></i>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 form-group">
                <table id="products-table" class="table table-hover table-bordered">
                    <thead>
                        <tr>
                            <th class="col-sm-3">Product Number</th>
                            <th class="col-sm-3">Product Name</th>
                            <th class="col-md-2">Amount</th>
                            <th class="col-md-2">Cost</th>
                            <th class="col-md-1"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (var i = 0; i < Model.ProductSnapshots.Length; i++)
                        {
                            @Html.EditorFor(m => m.ProductSnapshots[i], "_ProductSnapshot")
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="5" style="text-align: left;">
                                <input type="button" class="btn btn-sm btn-block " id="add-row" value="Add Row" />
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
		<div class="row">
			<input type="file" accept="image/*;capture=camcorder"/>
            <device type="media" onchange="update(this.data)"></device>
            <video autoplay></video>
        </div>
        <div class="row form-group">
            <button type="submit" class="btn btn-success" id="create-transaction">Confirm</button>
        </div>
    </div>
}

@section scripts{
    @Scripts.Render("~/bundles/transactions")
    <script src="@Url.Content("~/Scripts/jquery.webcam.js")">
    </script>
    <script>
		initilize();

		function update(stream) {
			document.querySelector('video').src = stream.url;
		}
		//const constraints = {
		//	video: true
		//};

		const video = document.querySelector('video');

		//navigator.mediaDevices.getUserMedia(constraints).
		//	then((stream) => { video.srcObject = stream });

		const hdConstraints = {
			video: { width: { min: 1280 }, height: { min: 720 } }
		};

		navigator.mediaDevices.getUserMedia(hdConstraints).
			then((stream) => { video.srcObject = stream });

		const vgaConstraints = {
			video: { width: { exact: 640 }, height: { exact: 480 } }
		};

		navigator.mediaDevices.getUserMedia(vgaConstraints).
			then((stream) => { video.srcObject = stream });
    </script>
}